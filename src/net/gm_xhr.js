(function(NS){ function available(){ return typeof GM_xmlhttpRequest==='function' || (typeof GM!=='undefined' && typeof GM.xmlHttpRequest==='function'); } function request(opts){ return new Promise((resolve,reject)=>{ const fn=typeof GM_xmlhttpRequest==='function'?GM_xmlhttpRequest:(GM&&typeof GM.xmlHttpRequest==='function'?GM.xmlHttpRequest:null); if(!fn){ reject(new Error('GM_xhr not available')); return; } fn(Object.assign({},opts,{ onload:resolve, onerror:e=>reject(new Error(e&&e.error||'GM_xhr error')), ontimeout:()=>reject(new Error('GM_xhr timeout')) })); }); } function ab2b64(ab){ const bytes=new Uint8Array(ab); const chunk=0x8000; let bin=''; for(let i=0;i<bytes.length;i+=chunk){ bin += String.fromCharCode.apply(null, bytes.subarray(i, i+chunk)); } return btoa(bin); } NS.net.gmxhr={ available, request, ab2b64 }; })(window.LCMD);
