(function(NS){ function isSameOriginFrame(fr){ try{ void fr.contentDocument; return true; }catch{ return false; } } function listSame(){ return Array.from(document.querySelectorAll('iframe')).filter(isSameOriginFrame).map(f=>({el:f, win:f.contentWindow, doc:f.contentDocument})); } function inject(win, doc){ const code=`(function(){ if(window.__LC_MONACO_DUMP_FRAME__)return; window.__LC_MONACO_DUMP_FRAME__=true; function isVis(n){ try{ if(!n) return false; const r=n.getBoundingClientRect(); return r.width>0&&r.height>0&&document.contains(n);}catch(e){return false;} } function pickEditor(M){ const eds=M?.editor?.getEditors?M.editor.getEditors():[]; const focused=eds.find(e=>e?.hasTextFocus&&e.hasTextFocus()); if(focused) return focused; const visible=eds.find(e=> isVis(e?.getDomNode&&e.getDomNode())); if(visible) return visible; return eds[0]||null; } window.addEventListener('message', function(ev){ try{ const msg=ev?.data; if(!msg||msg.type!=='lc-monaco-request') return; const id=msg.id||''; const M=window.monaco; let code='', langId='', info={where:'frame'}; if(M&&M.editor){ const ed=pickEditor(M); let model=ed?.getModel?ed.getModel():null; const models=M.editor.getModels?M.editor.getModels():[]; if(!model && models?.length){ model=models.sort((a,b)=>((b.getValue?.().length||0)-(a.getValue?.().length||0)))[0]||null; } if(model){ code=model.getValue?model.getValue():''; langId=model.getLanguageId?model.getLanguageId():''; } info={ where:'frame', editors:(M.editor.getEditors?M.editor.getEditors():[]).length, models:models.length, modelLen:(code||'').length, langId}; } else { info={where:'frame', monaco:false}; } window.parent.postMessage({type:'lc-monaco-dump', id, data:{code,langId,__info:info}}, '*'); }catch(e){ window.parent.postMessage({type:'lc-monaco-dump', id:(ev&&ev.data&&ev.data.id)||'', data:{code:'',langId:'',__info:{where:'frame',error:String(e&&e.message||e)}}}, '*'); } }); })();`; const s=doc.createElement('script'); s.textContent=code; doc.documentElement.appendChild(s); s.remove(); try{ win.__LC_MONACO_DUMP_FRAME_INJECTED__=true; }catch{} } function request(timeoutPer=1200){ const frames=listSame(); if(!frames.length) return Promise.resolve({code:'',langId:'',__info:{where:'frames',count:0}}); const id='fr_'+Math.random().toString(36).slice(2,8); let done=false, timer=null, first=null; function onMsg(ev){ const d=ev&&ev.data; if(!d||d.type!=='lc-monaco-dump'||d.id!==id) return; if(!done && d.data){ const payload=d.data; if(!first) first=payload; if(payload.code && payload.code.trim()){ done=true; window.removeEventListener('message', onMsg); if(timer) clearTimeout(timer); resolve(payload); } } } let resolve; const p=new Promise(res=>{ resolve=res; window.addEventListener('message', onMsg); for(const fr of frames){ try{ if(!fr.win.__LC_MONACO_DUMP_FRAME_INJECTED__) inject(fr.win, fr.doc); fr.win.postMessage({type:'lc-monaco-request', id}, '*'); }catch{} } timer=setTimeout(()=>{ window.removeEventListener('message', onMsg); resolve(first||{code:'',langId:'',__info:{where:'frames',timeout:true}}); }, timeoutPer+200); }); return p; } NS.capture.monacoFrames={ request }; })(window.LCMD);
