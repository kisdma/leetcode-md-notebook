(function(NS){ function looksLikeCode(s){ if(!s||typeof s!=='string') return false; const hints=['def ','class ','function ','#include','public static','console.log',';','=>','var ','let ','const ']; let score=0; for(const h of hints) if(s.includes(h)) score++; if((s.split('\n').length)>=3) score++; return score>=2 && s.length>=40; } function scan(slug, q){ try{ const ls=window.localStorage; if(!ls) return {ok:false, code:'', meta:{error:'localStorage unavailable'}}; const keys=Object.keys(ls); const lower=(slug||'').toLowerCase(); const bucket=[]; for(const k of keys){ let v=null; try{ v=ls.getItem(k);}catch{} if(!v) continue; let texts=[]; try{ texts=_extract(JSON.parse(v),0);}catch{ if(looksLikeCode(v)) texts=[v]; } for(const t of texts){ const cand={ key:k, text:t, matchSlug:k.toLowerCase().includes(lower), len:t.length }; bucket.push(cand); } } const pick=bucket.sort((a,b)=>(b.matchSlug-a.matchSlug)||(b.len-a.len))[0]; if(!pick) return {ok:false, code:'', meta:{error:'no plausible code'}}; return {ok:true, code:pick.text, meta:{key:pick.key}}; }catch(e){ return {ok:false, code:'', meta:{error:String(e)}}; } function _extract(o,d){ if(d>3) return []; if(typeof o==='string'){ return looksLikeCode(o)?[o]:[]; } if(o && typeof o==='object'){ let out=[]; for(const k in o){ try{ out=out.concat(_extract(o[k], d+1)); }catch{} } return out; } return []; } } NS.capture.storageScan={ scan }; })(window.LCMD);
