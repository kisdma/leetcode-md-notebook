(function(NS){ async function call(query, variables){ const csrftoken=(document.cookie.split('; ').map(v=>v.split('='))).find(([k])=>k==='csrftoken'||k==='csrftoken_v2')?.[1]||''; const eps=[location.origin+'/graphql', location.origin+'/graphql/']; let lastErr; for(const ep of eps){ try{ const res=await fetch(ep,{method:'POST',credentials:'include',headers:{'content-type':'application/json','x-csrftoken':csrftoken}, body:JSON.stringify({query,variables})}); const txt=await res.text(); if(!res.ok) throw new Error('HTTP '+res.status+' '+txt.slice(0,200)); const obj=JSON.parse(txt); if(obj.errors?.length) throw new Error('GraphQL: '+obj.errors.map(e=>e.message||'').join(' | ')); return obj; }catch(e){ lastErr=e; } } throw lastErr||new Error('GraphQL failed'); } async function fetchQuestion(slug){ const q=`query($titleSlug:String!){ question(titleSlug:$titleSlug){ questionId title titleSlug content difficulty stats exampleTestcases sampleTestCase metaData codeSnippets{lang langSlug code} topicTags{name slug} similarQuestions } }`; const out=await call(q,{titleSlug:slug}); const d=out?.data?.question||{}; let statsObj={}, meta={}, similar=[]; try{ statsObj=JSON.parse(d.stats||'{}'); }catch{} try{ meta=JSON.parse(d.metaData||'{}'); }catch{} try{ similar=JSON.parse(d.similarQuestions||'[]'); }catch{} return Object.assign({}, d, {statsObj, meta, similar}); } async function fetchHints(slug){ const q=`query($titleSlug:String!){ question(titleSlug:$titleSlug){ hints } }`; try{ const out=await call(q,{titleSlug:slug}); const arr=out?.data?.question?.hints; return Array.isArray(arr)?arr.map(String):[]; }catch(e){ return []; } } async function fetchSubmissions(slug,{limit=60,pageSize=20}={}){ const q=`query($offset:Int!,$limit:Int!,$questionSlug:String!){ submissionList(offset:$offset, limit:$limit, questionSlug:$questionSlug){ submissions{ id statusDisplay lang timestamp } hasNext lastKey }}`; let collected=[], offset=0, keep=true; // Minimal: single page for skeleton
  try{ const out=await call(q,{offset:0,limit:Math.min(limit,pageSize),questionSlug:slug}); const subs=(out?.data?.submissionList?.submissions)||[]; collected=subs.map(s=>({ id:Number(s.id), statusDisplay:s.statusDisplay||'', lang:String(s.lang||''), timestamp:s.timestamp||null })); }catch(e){ collected=[]; } return collected; } async function fetchSubmissionDetails(id){ const q=`query($id:Int!){ submissionDetails(submissionId:$id){ id code lang{ name } runtimePercentile memoryPercentile } }`; try{ const out=await call(q,{id}); const d=out?.data?.submissionDetails||{}; return { code: String(d.code||''), lang: d.lang?.name || '' }; }catch(e){ return { code:'', lang:'' }; } } NS.lc_api=NS.lc_api||{}; NS.lc_api.gql={ call, fetchQuestion, fetchHints, fetchSubmissions, fetchSubmissionDetails }; })(window.LCMD);
